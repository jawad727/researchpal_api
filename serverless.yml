service: researchpal-api

custom:
  settings:
    POSTS_TABLE: researchpal-posts
    USERS_TABLE: researchpal-users
    LIKES_TABLE: researchpal-likes

provider:
  name: aws
  runtime: nodejs12.x
  environment: ${self:custom.settings}
  iamRoleStatements:
    - Effect: "Allow"
      Action: 
        - dynamodb:DescribeTable
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:Query
        - dynamodb:BatchGetItem
      Resource:
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.settings.POSTS_TABLE}"
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.settings.USERS_TABLE}"
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.settings.LIKES_TABLE}"


functions:
  makePost:
    handler: handler.makePost
    events:
      - http:
          path: /post
          method: post
          cors: true
  deletePost:
    handler: handler.deletePost
    events:
      - http:
          path: /post/{id}
          method: delete
          cors: true
  createUser:
    handler: handler.createUser
    events:
      - http:
          path: /user
          method: post
          cors: true
  createliked:
    handler: handler.createliked
    events:
      - http:
          path: /like
          method: post
          cors: true
  getAllPosts:
    handler: handler.getAllPosts
    events:
      - http:
          path: /posts
          method: get
          cors: true
  getAllUsers:
    handler: handler.getAllUsers
    events:
      - http:
          path: /users
          method: get
          cors: true
  getSinglePost:
    handler: handler.getSinglePost
    events:
      - http:
          path: /singlepost/{uid}
          method: get
          cors: true
  getSingleUser:
    handler: handler.getSingleUser
    events:
      - http:
          path: /singleuser/{uid}
          method: get
          cors: true
  getPostByUser:
    handler: handler.getPostByUser
    events:
      - http:
          path: /poste/{uid}
          method: get
          cors: true
  getLikeByUser:
    handler: handler.getLikeByUser
    events:
      - http:
          path: /liked/{uid}
          method: get
          cors: true
  updatePost:
    handler: handler.updatePost
    events:
      - http:
          path: /post/{id}
          method: put
          cors: true


resources:
  Resources:
    PostTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
        - AttributeName: "uid"
          AttributeType: "S"
        KeySchema:
        - AttributeName: "uid"
          KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.settings.POSTS_TABLE}
    UserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
        - AttributeName: "uuid"
          AttributeType: "S"
        KeySchema:
        - AttributeName: "uuid"
          KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.settings.USERS_TABLE}
    LikesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
        - AttributeName: "userid"
          AttributeType: "S"
        KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
        - AttributeName: "userid"
          KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.settings.LIKES_TABLE}



